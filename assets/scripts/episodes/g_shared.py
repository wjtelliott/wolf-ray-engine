import pygame as pg


_ = False
map = [
    [1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, 1, 1, 1, 1, _, 3, 3, 3, _, 1, 1, 1, 1, 1],
    [1, _, 1, 1, _, _, _, _, _, 3, _, 1, 4, _, 4, 1],
    [1, _, 1, 1, _, _, _, _, _, 3, _, 1, 4, _, 4, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, 5, 5, 5, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, 1, 5, 5, 1, 1, _, 1, 1, 2, _, 2, 1, _, 1, 1],
    [1, _, 1, 1, _, _, _, _, _, 3, _, 1, 4, _, 4, 1],
    [1, _, 1, 1, _, _, _, _, _, 3, _, 1, 4, 2, 4, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, 4, _, _, _, 2, 2, 2, 2, 2, 2, _, 2, 1],
    [1, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, 1],
    [1, 1, 5, 5, 1, _, 1, _, _, 2, 2, 2, 1, 1, 1, 1],
    [1, _, 1, 1, _, _, _, _, _, 3, _, 1, 4, _, 4, 1],
    [1, _, 1, 1, _, 4, _, _, _, 3, _, 1, 4, _, 4, 1],
    [1, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, 4, _, 1, 1, 1, _, _, _, _, _, 1],
    [1, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, 1],
    [1, 1, 2, 2, 1, 1, _, 1, 1, 2, 2, 2, 1, 1, 1, 1],
    [1, _, 1, 1, _, _, _, _, _, 3, _, 2, 4, _, 4, 1],
    [1, _, 2, 2, _, _, 4, _, _, 3, _, 2, 4, _, 4, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, 5, 5, 5, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 3, 2, 1, 4, 4, 1],
]


class Map:
    def __init__(self, game):
        self.game = game
        self.map = map
        self.world_map = {}
        self.get_map()

    def get_map(self):
        for y, row in enumerate(self.map):
            for x, value in enumerate(row):
                if value:
                    self.world_map[(x, y)] = value


    def draw(self):
        [pg.draw.rect(self.game.screen, 'darkgrey', (pos[0] * 100, pos[1] * 100, 100, 100), 2)
        for pos in self.world_map]